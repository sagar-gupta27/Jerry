ðŸ”¹ Level 1: Core HTTP Server
Feature	                    What It Means	                                Why It Matters
===========================================================================================

1. TCP Socket Listener	    Listens for incoming TCP connections	            This is how clients (browsers) connect to the server
2. HTTP Request Parser	    Parses request line, headers, and body	            So the server can understand what the client wants
3. Response Formatter	    Sends properly formatted HTTP responses	            Browsers expect a strict format like HTTP/1.1 200 OK
4. Routing	                Maps URLs (e.g., /home) to handler logic	        Needed for multiple endpoints (like REST APIs)
5. MIME Types/Content-Type	Tells browser what kind of data is sent (HTML, CSS, JSON)	Correct rendering in the browser

ðŸ”¹ Level 2: Static File Server
===============================
Feature	What It Means	                Why It Matters
6. Serve Static Files	                Serve .html, .css, .js, .png, etc. from a folder	Needed for web pages, images, styles
7. 404 Not Found Handling	            Custom message if a file or route is missing	Users should see helpful errors
8. Content-Length Header	            Send size of response body	Required by HTTP/1.1 spec
9. Persistent Connections (optional)	Support keep-alive	For performance (we can skip this initially)

ðŸ”¹ Level 3: HTTP Method Support
Feature	What It Means	Why It Matters
10. Support for GET / POST / PUT / DELETE	Understand and respond based on HTTP verb	Required for REST APIs
11. Request Body Parsing (form/json)	Handle data sent in POST/PUT requests	Important for handling form submissions and APIs

ðŸ”¹ Level 4: Advanced Application Server
Feature	What It Means	Why It Matters
12. Templating Support (optional)	Generate HTML dynamically using templates	For rendering dynamic pages
13. Custom Error Pages	Display friendly 500/404 pages	Better user experience
14. Logging (Requests, Errors)	Log client IP, URL, status	For debugging and monitoring
15. Concurrency (Thread Pool)	Handle multiple clients simultaneously	Scalable multi-client support
16. Configuration File Support	Set port, static file path via config	Flexibility and clean separation

ðŸ”¹ Level 5: Mini-Tomcat-like Features
Feature	What It Means	Why It Matters
17. Servlet-Like Handler API	Define your own handler classes	Like Java Servlets â€” reuse logic
18. ClassLoader Support	Load handler classes dynamically	Like Tomcat loading .class or .war files
19. Hot Deployment (optional)	Reload code without restarting server	Developer productivity
20. Session Management	Track users across requests	Needed for login, cart, etc.
21. Cookie Parsing and Setting	Handle cookies sent/received	For sessions, preferences
22. Security Headers	Set headers like X-Frame-Options	Basic security hardening


*Selector is a watcher which can watch multiple channels for their readiness
*ServerSocket is blocking I/O and doesn't support Selector
*ServerSocketChannel is non-blocking I/O and support Selector

*Thread-pool --> group of already created threads that can be reused
*For each connected client to ServerSocket/ServerSocketChannel  a new socket/socketchannel is created.


What Are Negotiated Protocols?
Negotiated protocols are communication protocols where two (or more) parties agree on 
how to communicate by negotiating and selecting one or more compatible options (like encryption algorithms, protocol versions, compression schemes, etc.) at the start of the connection.

This negotiation ensures both sides can understand each other and operate securely or efficiently.